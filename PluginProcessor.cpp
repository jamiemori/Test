/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"



//==============================================================================
TestAudioProcessor::TestAudioProcessor()
{
    Volume = -1.0; // Initialize the contructor, set Volume to -1.0
}

TestAudioProcessor::~TestAudioProcessor()
{
}
//==============================================================================
const String TestAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int TestAudioProcessor::getNumParameters()
{
    return 0;
}

float TestAudioProcessor::getParameter (int index)
{
    return 0.0f;
}

void TestAudioProcessor::setParameter (int index, float newValue)
{
}

const String TestAudioProcessor::getParameterName (int index)
{
    return String();
}

const String TestAudioProcessor::getParameterText (int index)
{
    return String();
}
const String TestAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String TestAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool TestAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool TestAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool TestAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool TestAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool TestAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double TestAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int TestAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int TestAudioProcessor::getCurrentProgram()
{
    return 0;
}

void TestAudioProcessor::setCurrentProgram (int index)
{
}

const String TestAudioProcessor::getProgramName (int index)
{
    return String();
}

void TestAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void TestAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
}

void TestAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void TestAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{   
    //get the number of channels, number of samples, and number of output channels
    const int numChannels = buffer.getNumChannels();
    const int numSamples = buffer.getNumSamples();
    const int numOutputChannels = getNumOutputChannels();
    
    // perform loop over the number of channels, for stereo, channel should loop twice
    for (int channel = 0; channel < numChannels; ++channel)
    {
      // value pointed to by channelData is set to the writeable pointer to channel data
      float* channelData = buffer.getWritePointer(channel);

      //iterate of the the number of samples in the channel
        for (int i = 0; i < numSamples; ++i)
        {
         //set channel data to xn
         float xn = channelData[i];
        
        // Volume (from the slider object) is calculated so that it operates in decibles
        Volume = pow(10.0, Volumedb/20.0);

        //yn is the channel input scaled by the Volume knob value
         float yn = Volume * xn;

         //Output and rewrite to buffer
         channelData[i] = yn;

      } //End of sample buffer loop

   }// End of channel increment loop


  // clear the buffer
   for (int i = numChannels; i < numOutputChannels; ++i)  //clear out output buffers
    {
       buffer.clear (i, 0, buffer.getNumSamples());
    } 
  // End of Process Block
}

//==============================================================================
bool TestAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* TestAudioProcessor::createEditor()
{
    return new TestAudioProcessorEditor (*this);
}

//==============================================================================
void TestAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void TestAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new TestAudioProcessor();
}